//
// Created by lxq on 2022/4/1.
//
#include "iostream"
#include <vector>
#include <string>

#define optional_ch_practic c00


int main(int argc, char ** argv) {

#if  optional_ch_practic == c00
    printf("***模板*** \n");
/**
 * 模板是C++支持参数化多态的工具，使用模板可以使用户为类或者函数声明一种一般模式，使得类中的某些数据成员或者成员函数的参数、
 * 返回值取得任意类型。
 *
模板是一种对类型进行参数化的工具；
通常有两种形式：[函数模板]和[类模板]；
函数模板针对仅参数类型不同的函数
类模板针对仅数据成员和成员函数类型不同的类。
 */
//一、函数模板
/* 1.1 模板的通用格式
template <typename 形参名，typename 形参名，......>
返回类型 函数名(参数列表)
{
    函数体
}
 其中template和class是关键字，class可以用typename 关见字代替，在这里typename 和class没区别，
 <>括号中的参数叫模板形参，模板形参和函数形参很相像，模板形参不能为空。
 eg：swap的实例函数
 template <typename T>
 void swap(T& a, T& b){}，
 */


//二、类模板
/* 2.1 类模板的格式为：
template<class  形参名，class 形参名，…>
 class 类名
{ ... };
 类模板和函数模板都是以template开始后接模板形参列表组成，模板形参不能为空，一但声明了类模板就可以用类模板的形参名
 声明类中的成员变量和成员函数，即可以在类中使用内置类型的地方都可以使用模板形参名来声明
 eg：
 template<class T>
 class A
 {public: T a; T b;
 T hy(T c, T &d);};

 2.2 类模板对象的创建：比如一个模板类A，则使用类模板创建对象的方法为A<int> m;在类A后面跟上一个<>尖括号并在里面填上相应的
 类型，这样的话类A中凡是用到模板形参的地方都会被int 所代替。
 2.3 对于类模板，模板形参的类型必须在类名后的尖括号中明确指定。比如A<2> m;用这种方法把模板形参设置为int是错误的。

 2.4 在类模板外部定义成员函数的方法为：
 template<模板形参列表>
 函数返回类型 类名<模板形参名>::函数名(参数列表){函数体}，
 eg：比如有两个模板形参T1，T2的类A中含有一个void h()函数，则定义该函数的语法为：
 template<class T1,class T2>
 void A<T1,T2>::h(){}。

 2.5 再次提醒注意：模板的声明或定义只能在【全局，命名空间或类范围内】进行。即不能在局部范围，函数内进行，
 比如不能在main函数中声明或定义一个模板。
 */


// 三、模板的形参
/* 有三种类型的模板形参：类型形参，非类型形参和模板形参。
 * 3.1
 *
 */
#endif
}